mydict = {"EWA": "Australia",
 "EWO": "Austria",
 "EWK": "Belgium",
 "EWZ": "Brazil",
 "EWC": "Canada",
 "ECH": "Chile",
 "GXC": "China",
 "GXG": "Colombia",
 "EGPT": "Egypt",
 "EWQ": "France",
 "EWG": "Germany",
 "EWH": "Hong Kong",
 "PIN": "India",
 "IDX": "Indonesia",
 "EIRL": "Ireland",
 "EIS": "Israel",
 "EWI": "Italy",
 "EWM": "Malaysia",
 "EWW": "Mexico",
 "EWN": "Netherlands",
 "EPU": "Peru",
 "EPOL": "Poland",
 "EWS": "Singapore",
 "EZA": "South Africa",
 "EWY": "South Korea",
 "EWP": "Spain",
 "EWD": "Sweden",
 "EWL": "Switzerland",
 "EWT": "Taiwan",
 "THD": "Thailand",
 "TUR": "Turkey",
 "EWU": "United Kingdom",
 "EUSA": "United States",
 "VNM": "Vietnam",
 "ENZL": "New Zealand",
 "NORW": "Norway",
 "EPHE": "Philippines",
 "PGAL": "Portugal",
 "NGE": "Nigeria",
 "QAT": "Qatar",
 "UAE": "United Arab Emirates",
 "GREK": "Greece",
 "EWJ": "Japan",
 "KSA": "Saudi Arabia",
 "PAK": "Pakistan",
 "ARGT": "Argentina",
 "EDEN": "Denmark",
 "EFNL": "Finland",
 "KWT": "Kuwait"}

countries = ['Australia','Brazil','Canada','Chile','China','Colombia','France','Germany','Hong Kong',
             'India','Indonesia','Japan','Mexico','New Zealand','Norway','Peru','Poland','South Africa',
             'South Korea','Sweden','Switzerland','Taiwan','Turkey','United Kingdom','United States']

inverse_dict = {v: k for k, v in mydict.items()}
ETF_list = [inverse_dict[x] for x in countries]
ETF_list

mydict = {"EWA": "Australia",
 "EWO": "Austria",
 "EWK": "Belgium",
 "EWZ": "Brazil",
 "EWC": "Canada",
 "ECH": "Chile",
 "GXC": "China",
 "GXG": "Colombia",
 "EGPT": "Egypt",
 "EWQ": "France",
 "EWG": "Germany",
 "EWH": "Hong Kong",
 "PIN": "India",
 "IDX": "Indonesia",
 "EIRL": "Ireland",
 "EIS": "Israel",
 "EWI": "Italy",
 "EWM": "Malaysia",
 "EWW": "Mexico",
 "EWN": "Netherlands",
 "EPU": "Peru",
 "EPOL": "Poland",
 "EWS": "Singapore",
 "EZA": "South Africa",
 "EWY": "South Korea",
 "EWP": "Spain",
 "EWD": "Sweden",
 "EWL": "Switzerland",
 "EWT": "Taiwan",
 "THD": "Thailand",
 "TUR": "Turkey",
 "EWU": "United Kingdom",
 "EUSA": "United States",
 "VNM": "Vietnam",
 "ENZL": "New Zealand",
 "NORW": "Norway",
 "EPHE": "Philippines",
 "PGAL": "Portugal",
 "NGE": "Nigeria",
 "QAT": "Qatar",
 "UAE": "United Arab Emirates",
 "GREK": "Greece",
 "EWJ": "Japan",
 "KSA": "Saudi Arabia",
 "PAK": "Pakistan",
 "ARGT": "Argentina",
 "EDEN": "Denmark",
 "EFNL": "Finland",
 "KWT": "Kuwait"}

countries = ['Australia','Brazil','Canada','Chile','China','Colombia','France','Germany','Hong Kong',
             'India','Indonesia','Japan','Mexico','New Zealand','Norway','Peru','Poland','South Africa',
             'South Korea','Sweden','Switzerland','Taiwan','Turkey','United Kingdom','United States']

inverse_dict = {v: k for k, v in mydict.items()}
ETF_list = [inverse_dict[x] for x in countries]
ETF_list

indexed_df.to_csv("indexed_df.csv")

indexed_df = pd.read_csv("indexed_df.csv",index_col=0)
indexed_df.index = pd.to_datetime(indexed_df.index)
indexed_df.head()

import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
from plotly.subplots import make_subplots

clean_df = delete_outliers(full_df(10,1),2)
df_fx = 1 / clean_df

df_fx.tail()

from sklearn.linear_model import LassoCV, Lasso
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
import pandas as pd
from plotly.subplots import make_subplots
import plotly.graph_objects as go

currency = "BRL"
test_df = indexed_df[ETF_list].merge(df_fx[currency], left_index=True, right_index=True, how="inner")

# Target and Features
y = test_df[currency]
X = test_df[ETF_list].fillna(method="bfill")
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state=42)

# LassoCV to find the best alpha
lasso_cv = LassoCV(max_iter=10000, cv=5)
lasso_cv.fit(X_train, y_train)

# Initial Lasso Model (for feature selection)
lasso = Lasso(max_iter=10000, alpha=lasso_cv.alpha_)
lasso.fit(X_train, y_train)

# Select Top 5 Features
coef_series = pd.Series(lasso.coef_, index=X_train.columns)
top_features = coef_series.abs().sort_values(ascending=False).head(5).index.tolist()

# Train Model Using Only Top 5 Features
X_train_top5 = X_train[top_features]
X_test_top5 = X_test[top_features]

lasso_top5 = Lasso(max_iter=10000, alpha=lasso_cv.alpha_)
lasso_top5.fit(X_train_top5, y_train)

# Predictions and Evaluation
y_pred = lasso_top5.predict(X_test_top5)
mse = mean_squared_error(y_test, y_pred)
r_squared = r2_score(y_test, y_pred)

# Predictions on the Full Dataset Using Top 5 Features
test_df["ypred"] = lasso_top5.predict(test_df[top_features].fillna(method="bfill"))
test_df["resids"] = (test_df[currency] - test_df["ypred"]) / test_df[currency] * 100

# Coefficients and Selected Features
coefficients = lasso_top5.coef_
selected_X_vars = [top_features[i] for i in range(len(coefficients)) if coefficients[i] != 0]
non_zero_coefficients = [round(coeff, 3) for coeff in coefficients if coeff != 0]
xvars = [mydict[x] for x in selected_X_vars]

# Output Results
print(currency)
print("Mean squared error:", round(mse, 2))
print("R-squared:", round(r_squared, 2))

# Plotting
title = f"R^2: {round(r_squared, 2)}"
fig = make_subplots(rows=1, cols=2)
fig.add_scatter(x=test_df.index, y=test_df[currency], mode='lines', name=currency, row=1, col=1)
fig.add_scatter(x=test_df.index, y=test_df["ypred"], mode='lines', name="Model", row=1, col=1)
fig.add_scatter(x=test_df.index, y=test_df["resids"], mode='lines', name="Residual (%)", row=1, col=2)
fig.update_layout(width=1000, height=500, title_text=f"{currency} and model, {title}")
fig.update_layout(showlegend=True)
fig.show()

# Display Coefficients
print(pd.DataFrame(non_zero_coefficients, index=xvars).sort_values(by=0).round(2))
